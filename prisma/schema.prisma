// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Endereco {
  id          Int       @id @default(autoincrement())
  logradouro  String
  cidade      String
  estado      String
  cep         String
  pais        String
  complemento String?
  numero      String
  imovel      Imovel[]
  cliente     Cliente[]
}

model Imovel {
  id            Int         @id @default(autoincrement())
  disponivel    Boolean
  area          Float
  iptu          Decimal     @db.Money
  endereco      Endereco    @relation(fields: [enderecoId], references: [id])
  enderecoId    Int
  anuncio       Anuncio[]
  contrato      Contrato[]
  tipo          Tipo?       @relation(fields: [tipoId], references: [id])
  tipoId        Int?
  funcionario   Funcionario @relation(fields: [funcionarioId], references: [id], onDelete: Cascade)
  funcionarioId Int
}

model Tipo {
  id     Int      @id @default(autoincrement())
  nome   String
  imovel Imovel[]
}

model Anuncio {
  id            Int                      @id @default(autoincrement())
  titulo        String
  descricao     String
  dataDeCriacao DateTime
  valor         Decimal                  @db.Money
  tipo          String
  imovel        Imovel                   @relation(fields: [imovelId], references: [id], onDelete: Cascade)
  imovelId      Int
  interessado   InteressadosOnAnuncios[]
  favorito      Favorito[]
  interesse     Interesse[]
}

model Interessado {
  id       Int                      @id @default(autoincrement())
  nome     String
  telefone String
  email    String
  anuncio  InteressadosOnAnuncios[]
}

model InteressadosOnAnuncios {
  interessado   Interessado @relation(fields: [interessadoId], references: [id], onDelete: Cascade)
  interessadoId Int
  anuncio       Anuncio     @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
  anuncioId     Int
  assignedAt    DateTime    @default(now())

  @@id([interessadoId, anuncioId])
}

model Contrato {
  id             Int      @id @default(autoincrement())
  valor          Decimal  @db.Money
  vencimento     DateTime
  tipo           String   @db.Char(2)
  dataAssinatura DateTime
  imovel         Imovel   @relation(fields: [imovelId], references: [id], onDelete: Cascade)
  imovelId       Int
  cliente        Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId      Int
}

model Cliente {
  id             Int        @id @default(autoincrement())
  nome           String
  cpf            String
  rg             String?
  dataNascimento DateTime
  telefone       String
  email          String
  password       String?    
  endereco       Endereco   @relation(fields: [enderecoId], references: [id])
  enderecoId     Int
  contrato       Contrato[]
  favorito       Favorito[]
  interesse      Interesse[]
}

model Funcionario {
  id       Int      @id @default(autoincrement())
  nome     String
  email    String   @unique
  password String
  token    String?
  imovel   Imovel[]
}

model Favorito {
  id        Int   @id @default(autoincrement())
  anuncio        Anuncio   @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
  anuncioId      Int
  cliente        Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId      Int
}

model Interesse {
  id             Int   @id @default(autoincrement())
  anuncio        Anuncio   @relation(fields: [anuncioId], references: [id], onDelete: Cascade)
  anuncioId      Int
  cliente        Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId      Int
}